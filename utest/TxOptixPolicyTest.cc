#include <memory>
#include <string>

#include "gtest/gtest.h"
#include "strategy/TxOptixPolicy.hh"

#include "UtilsTest.hh"

class TxOptixPolicyTest : public ::testing::Test
{
 public:
  void SetUp()
  {
    txoptix_policy_.reset(new oe::TxOptixPolicy());
  }

 protected:
  std::auto_ptr<oe::TxOptixPolicy> txoptix_policy_;
};

TEST_F(TxOptixPolicyTest, testExecutePolicy)
{

  oe::TxOptions options;
  options.og_path_ = "out.xml";
  options.run_mode_ = oe::TX_RUN_SINGLE;
  options.debug_exist_ = true;
  options.debug_ = 1;

  oe::Instrument instr;
  instr.seq_ = 0;
  instr.symbol_ = "CITIC";
  instr.alpha_ = 0.5;
  instr.beta_ = 0.5;
  instr.gamma_ = 2.0;
  instr.zeta_ = 0.2;
  instr.tis_ = 0.5;
  instr.ris_ = 0.5;
  instr.pis_ = 0.5;
  instr.volume_ = 2765338;
  instr.vol_ = 1.0;
  instr.price_ = 4193.000;
  instr.quantity_ = 100;

  double volatility_data[] = {
    0.04447983, 0.00381788,
    0.04892411, 0.00358735,
    0.05336839, 0.00335446,
    0.05781267, 0.00328551,
    0.06225695, 0.00320785,
    0.06670123, 0.00318522,
    0.07114551, 0.00307458,
    0.07558979, 0.00299081,
    0.08003407, 0.00289563,
    0.08447835, 0.00294157,
    0.08892263, 0.00293352,
    0.09336691, 0.00287169,
    0.09781119, 0.00283264,
    0.10225547, 0.00276567,
    0.10669975, 0.00271065,
    0.11114403, 0.00265795,
    0.11558831, 0.00261342,
    0.12003259, 0.00259777,
    0.12447687, 0.00264476,
    0.12892115, 0.00264465,
    0.13336543, 0.00271161,
    0.13780971, 0.00279011,
    0.14225399, 0.00276620,
    0.14669827, 0.00273470,
    0.15114255, 0.00270746,
    0.15558683, 0.00268974,
    0.16003111, 0.00265569,
    0.16447539, 0.00255770,
    0.16891967, 0.00249040,
    0.17336395, 0.00247134,
    0.17780823, 0.00247246,
    0.18225251, 0.00239336,
    0.18669679, 0.00247161,
    0.19114107, 0.00265309,
    0.19558535, 0.00272092,
    0.20002963, 0.00271583,
    0.20447391, 0.00269837,
    0.20891819, 0.00263422,
    0.21336247, 0.00250346,
    0.21780675, 0.00245717,
    0.22225103, 0.00250638,
    0.22669531, 0.00244608,
    0.23113959, 0.00237433,
    0.23558387, 0.00225598,
    0.24002815, 0.00215367,
    0.24447243, 0.00226432,
    0.24891671, 0.00223100,
    0.25336099, 0.00221012,
    0.25780527, 0.00218658,
    0.26224955, 0.00221424,
    0.26669383, 0.00215678,
    0.27113811, 0.00216619,
    0.27558239, 0.00222272,
    0.28002667, 0.00220856,
    0.28447095, 0.00221261,
    0.28891523, 0.00205969,
    0.29335951, 0.00208363,
    0.29780378, 0.00210213,
    0.30224807, 0.00209896,
    0.30669234, 0.00202569,
    0.31113663, 0.00204254,
    0.31558090, 0.00197474,
    0.32002518, 0.00179222,
    0.32446946, 0.00180724,
    0.32891374, 0.00178413,
    0.33335802, 0.00179631,
    0.33780230, 0.00186778,
    0.34224658, 0.00196685,
    0.34669086, 0.00209714,
    0.35113514, 0.00223425,
    0.35557942, 0.00227409,
    0.36002370, 0.00230852,
    0.36446798, 0.00242881,
    0.36891226, 0.00251099,
    0.37335654, 0.00262665,
    0.37780082, 0.00263773,
    0.38224510, 0.00250051,
    0.38668938, 0.00236360,
    0.39113366, 0.00234489,
    0.39557794, 0.00237994,
    0.40002222, 0.00239532,
    0.40446650, 0.00237100,
    0.40891078, 0.00232347,
    0.41335506, 0.00239169,
    0.41779934, 0.00235044,
    0.42224362, 0.00234339,
    0.42668790, 0.00236604,
    0.43113218, 0.00240977,
    0.43557646, 0.00247137,
    0.44002074, 0.00247948,
    0.44446502, 0.00249652,
    0.44890930, 0.00260919,
    0.45335358, 0.00269333,
    0.45779786, 0.00263043,
    0.46224214, 0.00258398,
    0.46668642, 0.00255137,
    0.47113070, 0.00251756,
    0.47557498, 0.00246809,
    0.48001926, 0.00238643,
    0.48446354, 0.00235176,
    0.48890782, 0.00232068,
    0.49335210, 0.00225411,
    0.49779638, 0.00224472,
    0.50224066, 0.00210553,
    0.50668494, 0.00203006,
    0.51112922, 0.00198475,
    0.51557350, 0.00194081,
    0.52001778, 0.00194670,
    0.52446206, 0.00194990,
    0.52890634, 0.00200124,
    0.53335062, 0.00219327,
    0.53779490, 0.00236089,
    0.54223918, 0.00242397,
    0.54668346, 0.00259240,
    0.55112774, 0.00276417,
    0.55557202, 0.00280769,
    0.56001630, 0.00298783,
    0.56446058, 0.00302932,
    0.56890485, 0.00310143,
    0.57334913, 0.00316147,
    0.57779342, 0.00307941,
    0.58223770, 0.00298187,
    0.58668197, 0.00292794,
    0.59112626, 0.00279406,
    0.59557053, 0.00267861,
    0.60001481, 0.00271157,
    0.60445909, 0.00298677,
    0.60890337, 0.00302017,
    0.61334765, 0.00305677,
    0.61779193, 0.00307652,
    0.62223621, 0.00311380,
    0.62668049, 0.00311521,
    0.63112477, 0.00316492,
    0.63556905, 0.00318932,
    0.64001333, 0.00319602,
    0.64445761, 0.00311181,
    0.64890189, 0.00304282,
    0.65334617, 0.00296810,
    0.65779045, 0.00284997,
    0.66223473, 0.00274216,
    0.66667901, 0.00260550,
    0.67112329, 0.00268840,
    0.67556757, 0.00257971,
    0.68001185, 0.00256391,
    0.68445613, 0.00262282,
    0.68890041, 0.00253500,
    0.69334469, 0.00256458,
    0.69778897, 0.00261291,
    0.70223325, 0.00262562,
    0.70667753, 0.00272637,
    0.71112181, 0.00288184,
    0.71556609, 0.00287182,
    0.72001037, 0.00275972,
    0.72445465, 0.00269829,
    0.72889893, 0.00265533,
    0.73334321, 0.00268457,
    0.73778749, 0.00276860,
    0.74223177, 0.00288601,
    0.74667605, 0.00289359,
    0.75112033, 0.00288273,
    0.75556461, 0.00273861,
    0.76000889, 0.00269663,
    0.76445317, 0.00275847,
    0.76889745, 0.00272680,
    0.77334173, 0.00261538,
    0.77778601, 0.00257648,
    0.78223029, 0.00249701,
    0.78667457, 0.00241521,
    0.79111885, 0.00237701,
    0.79556313, 0.00232019,
    0.80000741, 0.00231221,
    0.80445169, 0.00221241,
    0.80889597, 0.00221052,
    0.81334025, 0.00220947,
    0.81778453, 0.00225587,
    0.82222881, 0.00225768,
    0.82667309, 0.00220808,
    0.83111737, 0.00227276,
    0.83556165, 0.00252485,
    0.84000593, 0.00281901,
    0.84445021, 0.00311476,
    0.84889448, 0.00335330,
    0.85333877, 0.00359109,
    0.85778305, 0.00368853,
    0.86222732, 0.00383074,
    0.86667160, 0.00415134,
    0.87111589, 0.00438585,
    0.87556016, 0.00444910,
    0.88000444, 0.00445340,
    0.88444872, 0.00436849,
    0.88889300, 0.00426232,
    0.89333728, 0.00425639,
    0.89778156, 0.00408805,
    0.90222584, 0.00417883,
    0.90667012, 0.00417172,
    0.91111440, 0.00400236,
    0.91555868, 0.00386644,
    0.92000296, 0.00374295,
    0.92444724, 0.00374272,
    0.92889152, 0.00364690,
    0.93333580, 0.00363616,
    0.93778008, 0.00355232,
    0.94222436, 0.00343664,
    0.94666864, 0.00325485,
    0.95111292, 0.00316269,
    0.95555720, 0.00327308,
    0.96000148, 0.00326082,
    0.96444576, 0.00324925,
    0.96889004, 0.00319315,
    0.97333432, 0.00326448,
    0.97777860, 0.00337544,
    0.98222288, 0.00349120,
    0.98666716, 0.00360250,
    0.99111144, 0.00375524,
    0.99555572, 0.00393884,
    1.00000000, 0.00421279
  };
  
  for(int i=0; i<sizeof(volatility_data)/sizeof(double); i+=2)
  {
    oe::Tuple tuple;
    tuple.time_ = volatility_data[i];
    tuple.value_ = volatility_data[i+1];
    
    instr.volatility_profile_.push_back(tuple);
  }

  double volume_data[] = {
    0.00000000, 0.00000000,
    0.04166667, 1956982.00000000,
    0.08333333, 2029040.00000000,
    0.12500000, 2059576.00000000,
    0.16666667, 2086758.00000000,
    0.20833333, 2119878.00000000,
    0.25000000, 2143716.00000000,
    0.29166667, 2196124.00000000,
    0.33333333, 2196124.00000000,
    0.37500000, 2261336.00000000,
    0.41666667, 2326848.00000000,
    0.45833333, 2393936.00000000,
    0.50000000, 2427174.00000000,
    0.54166667, 2441644.00000000,
    0.58333333, 2455846.00000000,
    0.62500000, 2455846.00000000,
    0.66666667, 2493422.00000000,
    0.70833333, 2528284.00000000,
    0.75000000, 2555332.00000000,
    0.79166667, 2569912.00000000,
    0.83333333, 2594046.00000000,
    0.87500000, 2631102.00000000,
    0.91666667, 2681714.00000000,
    0.95833333, 2711344.00000000,
    1.00000000, 2765338.00000000
  };
  for(int i=0; i<sizeof(volume_data)/sizeof(double); i+=2)
  {
    oe::Tuple tuple;
    tuple.time_ = volume_data[i];
    tuple.value_ = volume_data[i+1];
    
    instr.volume_profile_.push_back(tuple);
  }


  oe::InstrsInfo instrs_info;
  instrs_info.instr_list_.push_back(instr);
  
  for(int i=1; i<=9; i++)
  {
    instrs_info.schedule_list_.push_back(i/10.0);
  }

  oe::CommodityTradingScheduleList theCTSList;
  txoptix_policy_->execute(options, instrs_info, theCTSList);

  std::auto_ptr<oe::UtilsTest> utils(new oe::UtilsTest());
  utils->outputCTSList(theCTSList);
      
  EXPECT_TRUE(true);
  
}

